worker_processes  {{ .Config.WorkerProcesses }};
daemon off;

error_log stderr {{ .Config.LogLevel }};
pid {{ .Config.WorkingDir }}/nginx.pid;

events {
    # Accept connections as fast as possible.
    multi_accept on;
    # Includes both proxy and client connections.
    # So e.g. 4096 = 2048 persistent client connections to backends per worker.
    worker_connections {{ .Config.WorkerConnections }};
    # Use most optimal non-blocking selector on linux.
    # Should be selected by default on linux, we just make it explicit here.
    use epoll;
}

http {
    default_type text/html;

    # Access log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    # Keep alive time for client connections
    keepalive_timeout {{ .Config.KeepAliveSeconds }}s;

    # Optimize for latency over throughput for persistent connections
    tcp_nodelay on;

    # Obtain client IP from frontend's X-Forward-For header
    set_real_ip_from 0.0.0.0/0;
    real_ip_header X-Forwarded-For;
    real_ip_recursive off;

    # Put all data into the working directory
    access_log             {{ .Config.WorkingDir }}/access.log main gzip;
    client_body_temp_path  {{ .Config.WorkingDir }}/tmp_client_body 1 2;
    proxy_temp_path        {{ .Config.WorkingDir }}/tmp_proxy 1 2;
    fastcgi_temp_path      {{ .Config.WorkingDir }}/tmp_fastcgi 1 2;
    uwsgi_temp_path        {{ .Config.WorkingDir }}/tmp_uwsgi 1 2;
    scgi_temp_path         {{ .Config.WorkingDir }}/tmp_scgi 1 2;

    # Configure ingresses
    {{ $defaultAllow := .Config.DefaultAllow }}
    {{ $port := .Config.IngressPort }}
    {{ range $entry := .Entries }}
    # Start entry
    # {{ $entry.Name }}
    server {
        listen {{ $port }};
        server_name {{ $entry.Host }};

        # Restrict clients
        {{ if $defaultAllow }}allow {{ $defaultAllow }};{{ end }}
        allow 127.0.0.1;
        {{ if $entry.Allow }}allow {{ $entry.Allow }};{{ end }}
        deny all;

        location {{ if $entry.Path }}{{ $entry.Path }}{{ else }}/{{ end }} {
            proxy_pass http://{{ $entry.ServiceAddress }}:{{ $entry.ServicePort }};
        }
    }
    # End entry
    {{ end }}

    # End ingresses

    # Default backend
    server {
        listen {{ .Config.IngressPort }} default_server;
        location / {
            return 404;
        }
    }

    # Status port. This should be firewalled to only allow internal access.
    server {
        listen {{ .Config.HealthPort }} default_server reuseport;

        location /health {
            access_log off;
            return 200;
        }

        location /status {
            access_log off;
            stub_status;
        }

        location / {
            return 404;
        }
    }
}
